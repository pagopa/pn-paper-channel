AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

   #ApiDnsName:
   #  Type: String
   #  Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  SandboxSafeStorageBaseUrl:
    Type: String
    Description: 'Url to the SafeStorage microservice'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  DBClusterEndpoint:
    Type: String
    Description: 'AWS Cluster Endpoint'

  DBReaderEndpoint:
    Type: String
    Description: 'AWS Reader Endpoint'

  DBPort:
    Type: String
    Description: 'AWS DB Port'

  DBName:
    Type: String
    Description: 'AWS DB Name'

  DBSecretName:
    Type: String
    Description: 'AWS Secret Name'

  RequestDeliveryDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing request'

  RequestDeliveryDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing request'

  AuroraMasterSecretArn:
    Type: String
    Description: 'ARN of aurora secret'

Resources:
  # PN-Paper-Channel microservice
  PaperChannelMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-paper-channel'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry3: !Sub 'MICROSERVICE_URLS_SAFESTORAGE=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry4: !Sub 'MICROSERVICE_URLS_NATIONALREGISTRIES=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry5: !Sub 'MICROSERVICE_EXTRAS_SAFESTORAGECXID=pn-radd'
        ContainerEnvEntry6: !Sub 'PN_PAPER_CHANNEL_CLUSTER_ENDPOINT=${DBClusterEndpoint}'
        ContainerEnvEntry7: !Sub 'SPRING_DATASOURCE_USERNAME=${DBSecretName}'
        ContainerEnvEntry8: !Sub 'PN_PAPER_CHANNEL_CLUSTER_PORT=${DBPort}'
        ContainerEnvEntry9: !Sub 'PN_PAPER_CHANNEL_CLUSTER_NAME=${DBName}'
        ContainerEnvEntry10: !Sub 'AWS_DYNAMODBREQUESTDELIVERYTABLE=${RequestDeliveryDynamoTableName}'
        MappedPaths: '/paper-channel/*,/paper-channel-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn

  PaperChannelMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-paper-channel-CustomTaskPolicy'
      Roles:
        - !GetAtt PaperChannelMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource:
              - !Sub "${RequestDeliveryDynamoTableArn}"
              - !Sub "${AuroraMasterSecretArn}"
            
  # Dashboard
  PaperChannelMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-paper-channel"
        AlarmArns: !Join
          - ','
          - - !GetAtt PaperChannelMicroservice.Outputs.AutoScalingAlarmArn
            - !GetAtt PaperChannelMicroservice.Outputs.FatalLogsMetricAlarmArn