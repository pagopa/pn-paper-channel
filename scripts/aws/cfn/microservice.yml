AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

   #ApiDnsName:
   #  Type: String
   #  Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  SandboxSafeStorageBaseUrl:
    Type: String
    Description: 'Url to the SafeStorage microservice'

  SafeStorageCxId:
    Type: String
    Description: 'SafeStorage cx-id'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  PCKmsEncDecDynamoDataKeyARN:
    Type: String
    Description: 'Name of KMS Key for Dynamo encode/decode data'

  RequestDeliveryDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing request'

  RequestDeliveryDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing request'

  AddressDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing address of request delivery'

  AddressDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing address of request delivery'

  ExternalChannelsOutputsQueueName:
    Type: String
    Description: 'Push delivery-push essages to this Queue'

  ExternalChannelsOutputsQueueARN:
    Type: String
    Description: 'Push delivery-push essages to this Queue'

  ExternalChannels2PaperChannelQueueName:
    Type: String
    Description: 'Pull external-channel messages from this Queue'

  ExternalChannels2PaperChannelQueueARN:
    Type: String
    Description: 'Pull external-channel messages from this Queue'

Resources:
  # PN-Paper-Channel microservice
  PaperChannelMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-paper-channel'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry3: !Sub 'PN_PAPERCHANNEL_CLIENTSAFESTORAGEBASEPATH=${SandboxSafeStorageBaseUrl}'
        ContainerEnvEntry4: !Sub 'PN_PAPERCHANNEL_CLIENTNATIONALREGISTRIESBASEPATH=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry5: !Sub 'PN_PAPERCHANNEL_SAFESTORAGECXID=${SafeStorageCxId}'
        ContainerEnvEntry6: !Sub 'AWS_DYNAMODBREQUESTDELIVERYTABLE=${RequestDeliveryDynamoTableName}'
        ContainerEnvEntry7: !Sub 'AWS_DYNAMODBADDRESSTABLE=${AddressDynamoTableName}'
        ContainerEnvEntry8: !Sub 'AWS_KMS_KEYID=${PCKmsEncDecDynamoDataKeyARN}'
        ContainerEnvEntry9: !Sub 'AWS_KMS_REGION=${AWS::Region}'
        ContainerEnvEntry10: !Sub 'PN_PAPERCHANNEL_QUEUEDELIVERYPUSH=${ExternalChannelsOutputsQueueName}'
        ContainerEnvEntry11: !Sub 'PN_PAPERCHANNEL_QUEUEEXTERNALCHANNEL=${ExternalChannels2PaperChannelQueueName}'
        ContainerEnvEntry12: !Sub 'SPRING_CLOUD_FUNCTIONROUTER_QUEUES_LIST=${ExternalChannelsOutputsQueueName},${ExternalChannels2PaperChannelQueueName}'
        MappedPaths: '/paper-channel/*,/paper-channel-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        TaskRoleManagedPolicyArn: !Ref PaperChannelMicroserviceTaskPolicy

  PaperChannelMicroserviceTaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      #PolicyName: !Sub '${ProjectName}-paper-channel-CustomTaskPolicy'
      #Roles:
      #  - !GetAtt PaperChannelMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref ExternalChannelsOutputsQueueARN
              - !Ref ExternalChannels2PaperChannelQueueARN
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
            Resource:
              - !Ref PCKmsEncDecDynamoDataKeyARN
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
            Resource:
              - !Sub "${RequestDeliveryDynamoTableArn}"
              - !Sub "${RequestDeliveryDynamoTableArn}/*"
              - !Sub "${AddressDynamoTableArn}"
              - !Sub "${AddressDynamoTableArn}/*"

  # Dashboard
  PaperChannelMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-paper-channel"
        AlarmArns: !Join
          - ','
          - - !GetAtt PaperChannelMicroservice.Outputs.AutoScalingAlarmArn
            - !GetAtt PaperChannelMicroservice.Outputs.FatalLogsMetricAlarmArn